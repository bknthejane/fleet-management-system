name: Full CI/CD Pipeline

on:
  push:
    branches: ["main"]
    paths:
      - "Backend/**"
      - "Frontend/**"
  pull_request:
    branches: ["main"]
    paths:
      - "Backend/**"
      - "Frontend/**"

defaults:
  run:
    working-directory: Backend

jobs:
  backend-build:
    name: Backend Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore aspnet-core/FleetManagementSystem.sln

      - name: Build
        run: dotnet build --no-restore --configuration Release aspnet-core/FleetManagementSystem.sln

      - name: Publish
        run: dotnet publish aspnet-core/FleetManagementSystem.sln --configuration Release --output ./publish

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-app
          path: ./publish

  backend-test:
    name: Backend Test
    runs-on: ubuntu-latest
    needs: backend-build

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore aspnet-core/FleetManagementSystem.sln

      - name: Run tests
        run: |
          cd aspnet-core
          dotnet test --verbosity normal

  frontend-build:
    name: Frontend Build & Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd ../Frontend
          npm install

      - name: Run frontend tests
        run: |
          cd ../Frontend
          npm test

  db-update:
    name: Database Update
    runs-on: ubuntu-latest
    needs: [backend-build, backend-test]
    if: github.ref == 'refs/heads/main'

    env:
      PGHOST: ${{ secrets.DB_HOST }}
      PGPORT: ${{ secrets.DB_PORT }}
      PGNAME: ${{ secrets.DB_NAME }}
      PGUSERNAME: ${{ secrets.DB_USERNAME }}
      PGPASSWORD: ${{ secrets.DB_PASSWORD }}
      ASPNETCORE_ENVIRONMENT: Production

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore aspnet-core/FleetManagementSystem.sln

      - name: Install EF Core
        run: dotnet tool install --global dotnet-ef

      - name: Update Database
        run: |
          cd aspnet-core/src/FleetManagementSystem.EntityFrameworkCore
          dotnet ef database update

  deploy:
    name: Backend Deploy
    runs-on: ubuntu-latest
    needs: [backend-build, backend-test, db-update]
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-app
          path: ./app

      - name: Build Docker image
        run: |
          cd aspnet-core
          docker build -f Dockerfile -t fleetmanagementsystem:latest .

      - name: Verify Docker image
        run: docker images fleetmanagementsystem:latest

      - name: Deploy application
        run: |
          echo "Starting deployment..."
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}